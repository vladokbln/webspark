/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@arrow-left-name: 'arrow-left';
@arrow-left-x: 38px;
@arrow-left-y: 19px;
@arrow-left-offset-x: -38px;
@arrow-left-offset-y: -19px;
@arrow-left-width: 7px;
@arrow-left-height: 6px;
@arrow-left-total-width: 59px;
@arrow-left-total-height: 50px;
@arrow-left-image: '../img/sprite/sprite.png';
@arrow-left: 38px 19px -38px -19px 7px 6px 59px 50px '../img/sprite/sprite.png' 'arrow-left';
@arrow-right-name: 'arrow-right';
@arrow-right-x: 45px;
@arrow-right-y: 19px;
@arrow-right-offset-x: -45px;
@arrow-right-offset-y: -19px;
@arrow-right-width: 7px;
@arrow-right-height: 6px;
@arrow-right-total-width: 59px;
@arrow-right-total-height: 50px;
@arrow-right-image: '../img/sprite/sprite.png';
@arrow-right: 45px 19px -45px -19px 7px 6px 59px 50px '../img/sprite/sprite.png' 'arrow-right';
@close-name: 'close';
@close-x: 35px;
@close-y: 30px;
@close-offset-x: -35px;
@close-offset-y: -30px;
@close-width: 14px;
@close-height: 14px;
@close-total-width: 59px;
@close-total-height: 50px;
@close-image: '../img/sprite/sprite.png';
@close: 35px 30px -35px -30px 14px 14px 59px 50px '../img/sprite/sprite.png' 'close';
@comment-name: 'comment';
@comment-x: 18px;
@comment-y: 30px;
@comment-offset-x: -18px;
@comment-offset-y: -30px;
@comment-width: 17px;
@comment-height: 17px;
@comment-total-width: 59px;
@comment-total-height: 50px;
@comment-image: '../img/sprite/sprite.png';
@comment: 18px 30px -18px -30px 17px 17px 59px 50px '../img/sprite/sprite.png' 'comment';
@data-name: 'data';
@data-x: 0px;
@data-y: 30px;
@data-offset-x: 0px;
@data-offset-y: -30px;
@data-width: 18px;
@data-height: 20px;
@data-total-width: 59px;
@data-total-height: 50px;
@data-image: '../img/sprite/sprite.png';
@data: 0px 30px 0px -30px 18px 20px 59px 50px '../img/sprite/sprite.png' 'data';
@like-name: 'like';
@like-x: 38px;
@like-y: 0px;
@like-offset-x: -38px;
@like-offset-y: 0px;
@like-width: 21px;
@like-height: 19px;
@like-total-width: 59px;
@like-total-height: 50px;
@like-image: '../img/sprite/sprite.png';
@like: 38px 0px -38px 0px 21px 19px 59px 50px '../img/sprite/sprite.png' 'like';
@video-name: 'video';
@video-x: 0px;
@video-y: 0px;
@video-offset-x: 0px;
@video-offset-y: 0px;
@video-width: 38px;
@video-height: 30px;
@video-total-width: 59px;
@video-total-height: 50px;
@video-image: '../img/sprite/sprite.png';
@video: 0px 0px 0px 0px 38px 30px 59px 50px '../img/sprite/sprite.png' 'video';
@spritesheet-width: 59px;
@spritesheet-height: 50px;
@spritesheet-image: '../img/sprite/sprite.png';
@spritesheet-sprites: @arrow-left @arrow-right @close @comment @data @like @video;
@spritesheet: 59px 50px '../img/sprite/sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  background-image: e(%('url(%a)', e(@sprite-image)));
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
